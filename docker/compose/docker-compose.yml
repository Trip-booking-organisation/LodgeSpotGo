version: "3.8"
name: lodge-spot-prod
services:
  ## broker ##
  lodge-spot-mq:
    image: rabbitmq:3.11.7-management
    container_name: lodge-spot-mq
    hostname: "lodge-spot-mq"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: user
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      timeout: 5s
      interval: 5s
      retries: 10
    volumes:
      - mq-lodge-data-prod:/var/lib/rabbitmq
      - mq-lodge-log-prod:/var/log/rabbitmq
  keycloak-db:
    image: postgres
    restart: always
    ports:
      - "5431:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin1312
      POSTGRES_DB: keycloak
      POSTGRES_SCHEMA: keycloak
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    networks:
      - lodge-spot-go-net
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin1312
      KC_FEATURES: declarative-user-profile
    entrypoint: ["/opt/keycloak/bin/kc.sh", "start-dev"]
    ports:
      - "8080:8080"
    depends_on: 
      - keycloak-db
    networks:
      - lodge-spot-go-net
  ####  accommodation service ####
  accommodation-db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: lodge1312
      MONGO_INITDB_ROOT_PASSWORD: lodge420
      MONGO_INITDB_DATABASE: accommodation-db
    ports:
      - "27101:27017"
    volumes:
      - accommodation-db-data:/data/db
      - ../entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks: 
      - lodge-spot-go-net
  accommodation-service:
    image: ${YOUR_REGISTRY-}accommodation-service:1.0.0
    container_name: accommodation-service
    build: ../../lodge-spot-go-be/src/AccommodationManagement
    ports:
      - "7120:443"
      - "7132:80"
    environment:
      MongoDatabaseSettings:ConnectionString: mongodb://lodge1312:lodge420@accommodation-db:27017
      Jwt:Authority: http://host.docker.internal:8080/realms/booking-app
      Jwt:AuthorizationUrl: http://host.docker.internal:8080/realms/booking-app/protocol/openid-connect/auth
      Jwt:TokenUrl: http://host.docker.internal:8080/realms/booking-app/protocol/openid-connect/token
      MessageBroker:Host: amqp://lodge-spot-mq:5672
    networks:
      - lodge-spot-go-net
    depends_on:
      lodge-spot-mq:
        condition: service_healthy
  ####  reservation service ####
  reservation-db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: lodge1312
      MONGO_INITDB_ROOT_PASSWORD: lodge420
      MONGO_INITDB_DATABASE: reservation-db
    ports:
      - "27018:27017"
    volumes:
      - reservation-db-data:/data/db
      - ../entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      - lodge-spot-go-net
  reservation-service:
    image: ${YOUR_REGISTRY-}reservation-service:1.0.0
    container_name: reservation-service
    build: ../../lodge-spot-go-be/src/ReservationManagement
    ports:
      - "7105:443"
      - "7106:80"
    environment:
      MongoDatabaseSettings:ConnectionString: mongodb://lodge1312:lodge420@accommodation-db:27017
      Jwt:Authority: http://host.docker.internal:8080/realms/booking-app
      Jwt:AuthorizationUrl: http://host.docker.internal:8080/realms/booking-app/protocol/openid-connect/auth
      Jwt:TokenUrl: http://host.docker.internal:8080/realms/booking-app/protocol/openid-connect/token
      MessageBroker:Host: amqp://lodge-spot-mq:5672
    networks:
      - lodge-spot-go-net
    depends_on:
      lodge-spot-mq:
        condition: service_healthy
    ####  search and filter service ####
  search-db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: lodge1312
      MONGO_INITDB_ROOT_PASSWORD: lodge420
      MONGO_INITDB_DATABASE: search-db
    ports:
      - "27100:27017"
    volumes:
      - search-db-data:/data/db
      - ../entrypoint-initdb.d:/docker-entrypoint-initdb.d
  search-service:
    image: ${YOUR_REGISTRY-}search-service:1.0.0
    container_name: search-service
    build: ../../lodge-spot-go-be/src/SearchAndFilter
    ports:
      - "7231:443"
      - "7230:80"
    environment:
      MongoDatabaseSettings:ConnectionString: mongodb://lodge1312:lodge420@search-db:27017
      Jwt:Authority: http://host.docker.internal:8080/realms/booking-app
      Jwt:AuthorizationUrl: http://host.docker.internal:8080/realms/booking-app/protocol/openid-connect/auth
      Jwt:TokenUrl: http://host.docker.internal:8080/realms/booking-app/protocol/openid-connect/token
      AccommodationUrl: http://accommodation-service:80
      ReservationUrl: http://reservation-service:80
    networks:
      - lodge-spot-go-net
    depends_on:
      - search-db
  users-db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: lodge1312
      MONGO_INITDB_ROOT_PASSWORD: lodge420
      MONGO_INITDB_DATABASE: user-db
    ports:
      - "27019:27017"
    volumes:
      - user-db-data:/data/db
      - ../entrypoint-initdb.d:/docker-entrypoint-initdb.d
  users-service:
    image: ${YOUR_REGISTRY-}users-service:1.0.0
    container_name: user-service
    build: ../../lodge-spot-go-be/src/UsersManagement
    ports:
      - "7170:443"
      - "7169:80"
    environment:
      MongoDatabaseSettings:ConnectionString: mongodb://lodge1312:lodge420@users-db:27017
      MessageBroker:Host: amqp://lodge-spot-mq:5672
    networks:
      - lodge-spot-go-net
    depends_on:
      lodge-spot-mq:
        condition: service_healthy
  api-gw:
    image: ${YOUR_REGISTRY-}users-service:1.0.0
    container_name: user-service
    build: ../../lodge-spot-go-be/src/ApiGateway/
    environment:
      ASPNETCORE_ENVIRONMENT : Container
    ports:
      - "5294:80"
      - "7120:443"
    networks: 
      lodge-spot-go-net:
volumes:
  accommodation-db-data:
    driver: local
  reservation-db-data:
    driver: local
  user-db-data:
    driver: local
  search-db-data:
    driver: local
  keycloak-db-data:
    driver: local
  mq-lodge-data-prod:
    driver: local
  mq-lodge-log-prod:
    driver: local
networks:
  lodge-spot-go-net:
    driver: bridge